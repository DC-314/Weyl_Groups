import torch

# Set the device
device = "mps" if torch.backends.mps.is_available() else "cpu"


# This program generates the Weyl group for E8, and partitions the group, 
# depending on the order of the group elements. The order of the group element 
# is defined as the number of generators, multipled together to create the element.
# The program also counts the elements that are their own inverse in each partition.
#
#  Diagram for  E8
#
#         0
#         |
# 1---2---3---4---5---6---7
#




I8= torch.eye(8).byte()

T0 = tensor([[-1, 0, 0, 0, 0, 0, 0, 0],
             [ 0, 1, 0, 0, 0, 0, 0, 0],
             [ 0, 0, 1, 0, 0, 0, 0, 0],
             [ 1, 0, 0, 1, 0, 0, 0, 0],
             [ 0, 0, 0, 0, 1, 0, 0, 0],
             [ 0, 0, 0, 0, 0, 1, 0, 0],
             [ 0, 0, 0, 0, 0, 0, 1, 0],
             [ 0, 0, 0, 0, 0, 0, 0 ,1]], dtype=torch.uint8,  device='mps:0')
        
T1 = tensor([[1, 0, 0, 0, 0, 0, 0, 0],
             [0,-1, 0, 0, 0, 0, 0, 0],
             [0, 1, 1, 0, 0, 0, 0, 0],
             [0, 0, 0, 1, 0, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 0, 1, 0, 0],
             [0, 0, 0, 0, 0, 0, 1, 0],
             [0, 0, 0, 0, 0, 0, 0 ,1]], dtype=torch.uint8,  device='mps:0')
     
T2 = tensor([[1, 0, 0, 0, 0, 0, 0, 0],
             [0, 1, 1, 0, 0, 0, 0, 0],
             [0, 0,-1, 0, 0, 0, 0, 0],
             [0, 0, 1, 1, 0, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 0, 1, 0, 0],
             [0, 0, 0, 0, 0, 0, 1, 0],
             [0, 0, 0, 0, 0, 0, 0 ,1]], dtype=torch.uint8,  device='mps:0')     
                        
T3 = tensor([[1, 0, 0, 1, 0, 0, 0, 0],
             [0, 1, 0, 0, 0, 0, 0, 0],
             [0, 0, 1, 1, 0, 0, 0, 0],
             [0, 0, 0,-1, 0, 0, 0, 0],
             [0, 0, 0, 1, 1, 0, 0, 0],
             [0, 0, 0, 0, 0, 1, 0, 0],
             [0, 0, 0, 0, 0, 0, 1, 0],
             [0, 0, 0, 0, 0, 0, 0 ,1]], dtype=torch.uint8,  device='mps:0')
                        
T4 = tensor([[1, 0, 0, 0, 0, 0, 0, 0],
             [0, 1, 0, 0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 0, 0, 0],
             [0, 0, 0, 1, 1, 0, 0, 0],
             [0, 0, 0, 0,-1, 0, 0, 0],
             [0, 0, 0, 0, 1, 1, 0, 0],
             [0, 0, 0, 0, 0, 0, 1, 0],
             [0, 0, 0, 0, 0, 0, 0 ,1]], dtype=torch.uint8,  device='mps:0')
                        
T5 = tensor([[1, 0, 0, 0, 0, 0, 0, 0],
             [0, 1, 0, 0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 0, 0, 0],
             [0, 0, 0, 1, 0, 0, 0, 0],
             [0, 0, 0, 0, 1, 1, 0, 0],
             [0, 0, 0, 0, 0,-1, 0, 0],
             [0, 0, 0, 0, 0, 1, 1, 0],
             [0, 0, 0, 0, 0, 0, 0 ,1]], dtype=torch.uint8,  device='mps:0')
                        
T6 = tensor([[1, 0, 0, 0, 0, 0, 0, 0],
             [0, 1, 0, 0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 0, 0, 0],
             [0, 0, 0, 1, 0, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 0, 1, 1, 0],
             [0, 0, 0, 0, 0, 0,-1, 0],
             [0, 0, 0, 0, 0, 0, 1 ,1]], dtype=torch.uint8,  device='mps:0')
             
T7 = tensor([[1, 0, 0, 0, 0, 0, 0, 0],
             [0, 1, 0, 0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0, 0, 0, 0],
             [0, 0, 0, 1, 0, 0, 0, 0],
             [0, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 0, 1, 0, 0],
             [0, 0, 0, 0, 0, 0, 1, 1],
             [0, 0, 0, 0, 0, 0, 0,-1]], dtype=torch.uint8,  device='mps:0')
                        
                        


print(identity_tensor)
print(zero_tensor_1)
print(zero_tensor_2)
print(zero_tensor_3)
print(zero_tensor_4)
print(zero_tensor_5)
print(zero_tensor_6)
print(zero_tensor_7)
